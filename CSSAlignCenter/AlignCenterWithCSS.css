/*
CSS 中的变量的声明
*/
:root {
    --main-color: #ffffff;
    --main-bg-color: #000000;
    --second-color: #1b0cf0;
    --second-bg-color: #ebe6e6;
    --div-height: 300px;
    --div-width: 500px;
}

@font-face {
    font-family: myFont;
    src: url("http://developer.mozilla.org/@api/deki/files/2934/=VeraSeBd.ttf");
}

.alternativeColor {
    color: var(--my-var, red);
    /* Red if --my-var is not defined */
}

/*
在 JavaScript 中获取或者修改 CSS  变量和操作普通 CSS 属性是一样的：
// 获取一个 Dom 节点上的 CSS 变量
element.style.getPropertyValue("--my-var");

// 获取任意 Dom 节点上的 CSS 变量
getComputedStyle(element).getPropertyValue("--my-var");

// 修改一个 Dom 节点上的 CSS 变量
element.style.setProperty("--my-var", jsVar + 4);
*/

body {
    font-family: myFont;
    /* 使用一个局部变量时用 var() 函数包裹以表示一个合法的属性值 */
    color: var(--main-color);
    background-color: var(--main-bg-color);
}


/* 
    有宽高的情况下，实现水平和垂直居中
    方法一：使用定位 position:absolute; 
    left和top值为50%；
    然后margin的left和top分别减去宽和高的一半。
*/
.container1 {
    color: var(--second-color);
    background-color: var(--second-bg-color);
    width: var(--div-width);
    height: var(--div-height);

    position: absolute;
    left: 50%;
    top: 50%;
    margin-top: calc((var(--div-height) / 2) * -1);
    margin-right: 0;
    margin-bottom: 0;
    margin-left: calc((var(--div-width) / 2) * -1);

    z-index: 10;
}

/* 
    有宽高的情况下，实现水平和垂直居中
    方法二：使用定位position:absolute;
    四个方向值都是0，然后margin：auto；
*/
.container2 {
    color: var(--second-color);
    background-color: var(--second-bg-color);
    width: var(--div-width);
    height: var(--div-height);

    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    margin: auto;

    z-index: 11;
}


/* 
    没有宽高的情况下，元素宽高由内容撑开 
    方法一：结合css3的transform:translate(-50%,-50%);
*/
.container3 {
    color: #ffffff;
    background-color: rgb(47, 0, 255);
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 12;
}


/* 
    没有宽高的情况下，元素宽高由内容撑开 
    方法二：使用js实现，实现水平和垂直居中，
    使用定位和margin 
*/

/* <script>
    document.addEventListener('DOMContentLoaded',function(){
        var oDiv = document.getElementById('div1');
        //alert(oDiv.clientWidth);//有padding的时候是180px，没有padding的时候是160px
        oDiv.style.position = "absolute";
        oDiv.style.left = "50%";
        oDiv.style.top = "50%";
        oDiv.style.marginLeft =  -(oDiv.clientWidth/2) + "px";
        oDiv.style.marginTop =  -(oDiv.clientHeight/2) + "px";
    },false);
</script> */

/* 
    没有宽高的情况下，元素宽高由内容撑开 
    方法四：利用CSS3弹性盒模型（flexBox）
    在父级容器内设定子块元素居中
*/
.parentContainer {
    width: var(--div-width);
    height: var(--div-height);
    border: 1px solid black;
    background-color: #ffffff;

    /* parent container align center in X and Y*/
    position: absolute;
    left: 50%;
    top: 50%;
    margin-top: calc((var(--div-height) / 2) * -1);
    margin-right: 0;
    margin-bottom: 0;
    margin-left: calc((var(--div-width) / 2) * -1);

    /* setting the children in the parent container align center in X and Y */
    display: flex;
    justify-content: center;
    align-items: center;
}

/* 行内元素居中 */
.containerLine {
    text-align: center;
    width: 300px;
    height: 300px;
    background: #999999;
}